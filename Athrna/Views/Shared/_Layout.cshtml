@using Microsoft.Extensions.DependencyInjection
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Athrna</title>
    <meta name="description" content="Discover Saudi Arabia's historical and cultural heritage sites with Athrna - your guide to exploring rich Islamic history and architecture.">
    <link rel="icon" href="~/images/logo.jpg" />
    <link rel="stylesheet" href="~/css/dark-mode.css" />
    <link rel="stylesheet" href="~/css/google-maps-styles.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/styles.css" />
    <link rel="stylesheet" href="~/css/map.css" />
    <link rel="stylesheet" href="~/css/login-modal.css" />
    <link rel="stylesheet" href="~/css/register.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    @RenderSection("Styles", required: false)
    <style>
        .messages-badge {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 20px;
            height: 20px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            font-size: 0.7rem;
            font-weight: bold;
            margin-left: 5px;
        }

        .dropdown-item .messages-badge {
            float: right;
            margin-left: auto;
            margin-right: 0;
        }

        .user-menu-btn .messages-badge {
            position: absolute;
            top: 0;
            right: 0;
            transform: translate(25%, -25%);
        }
    </style>
</head>
<body>
    <a href="#main-content" class="skip-link visually-hidden-focusable">Skip to main content</a>

    <header role="banner">
        <div class="logo">
            <a href="/">
                <img src="~/images/logo.jpg" alt="Athrna Logo" id="logo-image" aria-label="Athrna Logo" />
                <div class="logo-text">Athrna</div>
            </a>
        </div>

        <!-- Mobile menu toggle -->
        <button class="mobile-menu-toggle d-md-none" aria-label="Toggle navigation menu" aria-expanded="false">
            <i class="bi bi-list"></i>
        </button>

        <div class="search-bar" role="search">
            <form asp-controller="Search" asp-action="Index" method="get">
                <label for="searchInput" class="visually-hidden">Search historical sites</label>
                <input type="text" id="searchInput" name="query" placeholder="Search historical sites..." aria-label="Search historical sites" />
                <button type="submit" aria-label="Submit search"><i class="bi bi-search" aria-hidden="true"></i></button>
            </form>
        </div>

        <!-- Mobile search toggle -->
        <button class="search-toggle d-md-none" aria-label="Toggle search" aria-expanded="false">
            <i class="bi bi-search"></i>
        </button>

        <div class="header-actions">
            @if (User.Identity.IsAuthenticated)
            {
                <div class="dropdown">
                    <button class="user-menu-btn" id="userMenuButton" data-bs-toggle="dropdown" aria-expanded="false" aria-label="User menu">
                        <span class="user-avatar" aria-hidden="true">@User.Identity.Name.Substring(0, 1).ToUpper()</span>
                        <span class="user-name" data-no-translate="true">@User.Identity.Name</span>
                        @if (!User.IsInRole("Administrator") && !User.IsInRole("Guide"))
                        {
                            // Get unread messages count
                            int unreadMessages = 0;
                            try
                            {
                                using (var scope = Context.RequestServices.CreateScope())
                                {
                                    var dbContext = scope.ServiceProvider.GetRequiredService<Athrna.Data.ApplicationDbContext>();
                                    var userId = int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value);
                                    unreadMessages = dbContext.Messages.Count(m => m.RecipientId == userId
                                    && m.RecipientType == "Client"
                                    && !m.IsRead);
                                }

                                if (unreadMessages > 0)
                                {
                                    <span class="messages-badge">@unreadMessages</span>
                                }
                            }
                            catch (Exception) { /* Ignore errors */ }
                        }
                        <i class="bi bi-chevron-down" aria-hidden="true"></i>
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="userMenuButton">
                        <li><a class="dropdown-item" asp-controller="UserDashboard" asp-action="Index">My Dashboard</a></li>
                        <li><a class="dropdown-item" asp-controller="UserDashboard" asp-action="Bookmarks">My Bookmarks</a></li>
                        @if (!User.IsInRole("Administrator") && !User.IsInRole("Guide"))
                        {
                            // Get unread messages count (reusing the variable from above)
                            int unreadMessages = 0;
                            try
                            {
                                using (var scope = Context.RequestServices.CreateScope())
                                {
                                    var dbContext = scope.ServiceProvider.GetRequiredService<Athrna.Data.ApplicationDbContext>();
                                    var userId = int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value);
                                    unreadMessages = dbContext.Messages.Count(m => m.RecipientId == userId
                                    && m.RecipientType == "Client"
                                    && !m.IsRead);
                                }
                            }
                            catch (Exception) { /* Ignore errors */ }

                            <li>
                                <a class="dropdown-item" asp-controller="UserDashboard" asp-action="Messages">
                                    My Messages
                                    @if (unreadMessages > 0)
                                    {
                                        <span class="messages-badge">@unreadMessages</span>
                                    }
                                </a>
                            </li>
                            <li><a class="dropdown-item" asp-controller="Booking" asp-action="MyBookings">My Bookings</a></li>
                        }
                        <li><a class="dropdown-item" asp-controller="UserDashboard" asp-action="Profile">My Profile</a></li>
                        @if (User.IsInRole("Administrator"))
                        {
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" asp-controller="Admin" asp-action="Index">Admin Dashboard</a></li>
                        }
                        @if (User.IsInRole("Guide"))
                        {
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" asp-controller="GuideDashboard" asp-action="Index">Guide Dashboard</a></li>
                        }
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" asp-controller="Account" asp-action="Logout">Logout</a></li>
                    </ul>
                </div>
            }
            else
            {
                <div class="auth-buttons">
                    <a href="#" class="auth-btn login-btn">Login</a>
                    <a asp-controller="Account" asp-action="Register" class="auth-btn register-btn">Register</a>
                </div>
            }
            <!-- Language Selector -->
            @await Component.InvokeAsync("LanguageSelector")
        </div>
    </header>

    <main id="main-content" role="main">
        @RenderBody()
    </main>

    <footer role="contentinfo">
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <p>&copy; @DateTime.Now.Year Athrna - Saudi Historical Sites All rights reserved</p>
                </div>
                <div class="col-md-6 text-md-end">
                    <ul class="footer-links">
                        <li><a href="/Home/Privacy">Privacy Policy</a></li>
                        <li><a href="/Home/Accessibility">Accessibility</a></li>
                        <li><a href="/Home/Contact">Contact Us</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </footer>
    <!-- Include Login Modal Partial View -->
    @await Html.PartialAsync("_LoginModal")

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js"></script>
    <script src="~/js/login-modal.js"></script>
    <script src="~/js/dark-mode.js"></script>
    @RenderSection("Scripts", required: false)
    <!-- Anti-forgery token for AJAX requests -->
    @Html.AntiForgeryToken()
    @if (TempData["ClearLocalStorage"] != null && (bool)TempData["ClearLocalStorage"] == true)
    {
        <script>
            // Clear localStorage items related to authentication and admin status
            localStorage.removeItem('isAdmin');
            localStorage.removeItem('adminRoleLevel');
            localStorage.removeItem('adminRoleName');
            localStorage.removeItem('isRememberedSession');
            console.log('Cleared authentication data from localStorage after logout');
        </script>
    }
    @await Html.PartialAsync("_MapScriptsPartial")
    @* Add this to your _Layout.cshtml file as a section at the bottom, before closing </body> tag *@

    <!-- Google Maps API Scripts -->
    <script>
        // Your Google Maps API key
        var googleMapsApiKey = "AIzaSyCfmD2cv4d6ML3shp0YER9gpHT5VHdsvpQ";

        // Load Google Maps API asynchronously
        function loadGoogleMapsAPI() {
            if (document.getElementById('googleMap')) {
                var script = document.createElement('script');
                script.src = 'https://maps.googleapis.com/maps/api/js?key=' + googleMapsApiKey + '&callback=initMap';
                script.async = true;
                script.defer = true;
                script.onerror = function () {
                    console.error('Failed to load Google Maps API');
                    var mapContainer = document.getElementById('googleMap');
                    if (mapContainer) {
                        mapContainer.innerHTML = '<div class="map-error">Failed to load Google Maps. Please try again later.</div>';
                    }
                };
                document.body.appendChild(script);
            }
        }

        // Load the API on page load
        document.addEventListener('DOMContentLoaded', function () {
            loadGoogleMapsAPI();
        });
    </script>

    <!-- Load Google Maps JS Implementation -->
    <script src="~/js/interactive-map.js"></script>
    <script src="~/js/login-required.js"></script>
</body>
</html>