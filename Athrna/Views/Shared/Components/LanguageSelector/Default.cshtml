@model Athrna.ViewComponents.LanguageSelectorViewModel

<div class="language-selector">
    <div class="dropdown">
        <button class="language-select-btn dropdown-toggle" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            @foreach (var language in Model.Languages)
            {
                if (language.Code == Model.CurrentLanguage)
                {
                    <span class="language-flag @language.Code">@language.Name</span>
                }
            }
        </button>
        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="languageDropdown">
            @foreach (var language in Model.Languages)
            {
                <li>
                    <a class="dropdown-item @(language.Code == Model.CurrentLanguage ? "active" : "")"
                       href="#"
                       data-language-code="@language.Code"
                       data-is-rtl="@language.IsRtl.ToString().ToLower()">
                        <span class="language-flag @language.Code">@language.Name</span>
                    </a>
                </li>
            }
        </ul>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Wait until all elements are rendered
        setTimeout(() => {
            let currentLanguage = getCurrentLanguage();
            updateLanguageSelection(currentLanguage);

            const isRtl = isCurrentLanguageRtl();
            applyRtlTextHandling(isRtl);
        }, 0);

        // Set up event listeners for language change
        document.querySelectorAll('[data-language-code]').forEach(item => {
            item.addEventListener('click', function (e) {
                e.preventDefault();

                const selectedLanguage = this.getAttribute('data-language-code');
                const isRtl = this.getAttribute('data-is-rtl') === 'true';

                updateLanguageSelection(selectedLanguage);
                sessionStorage.setItem('Athrna_IsRtl', isRtl);

                const url = new URL(window.location.href);
                url.searchParams.set('lang', selectedLanguage);
                window.location.href = url.toString();
            });
        });

        function getCurrentLanguage() {
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.has('lang')) return urlParams.get('lang');

            const cookies = document.cookie.split(';');
            for (let cookie of cookies) {
                const [name, value] = cookie.trim().split('=');
                if (name === 'Athrna_Language') return value;
            }

            return 'en';
        }

        function isCurrentLanguageRtl() {
            const currentLang = getCurrentLanguage();
            const langItem = document.querySelector(`[data-language-code="${currentLang}"]`);
            if (langItem) {
                return langItem.getAttribute('data-is-rtl') === 'true';
            }

            return sessionStorage.getItem('Athrna_IsRtl') === 'true';
        }

        function updateLanguageSelection(language) {
            const languageButton = document.querySelector('.language-select-btn');
            if (!languageButton) return;

            let languageText = '';
            let languageCode = '';

            document.querySelectorAll('[data-language-code]').forEach(item => {
                const itemLanguage = item.getAttribute('data-language-code');
                item.classList.remove('active');
                if (itemLanguage === language) {
                    item.classList.add('active');
                    languageText = item.querySelector('.language-flag').textContent;
                    languageCode = itemLanguage;
                }
            });

            if (languageText && languageCode) {
                languageButton.innerHTML = '';
                const span = document.createElement('span');
                span.className = `language-flag ${languageCode}`;
                span.textContent = languageText;
                languageButton.appendChild(span);
            }
        }

        function applyRtlTextHandling(isRtl) {
            if (isRtl) {
                document.body.classList.add('rtl-text');
                if (!document.querySelector('link[href="/css/rtl-text.css"]')) {
                    const rtlTextCss = document.createElement('link');
                    rtlTextCss.rel = 'stylesheet';
                    rtlTextCss.href = '/css/rtl-text.css';
                    document.head.appendChild(rtlTextCss);
                }
            } else {
                document.body.classList.remove('rtl-text');
                const rtlTextCss = document.querySelector('link[href="/css/rtl-text.css"]');
                if (rtlTextCss) rtlTextCss.remove();
            }
        }
    });
</script>