@model List<Athrna.Models.Site>
@{
    ViewData["Title"] = "Map Site IDs";
    Layout = "_AdminLayout";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <div class="d-flex align-items-center">
                        <h6 class="mb-0">Interactive Map Site ID Reference</h6>
                        <a asp-action="Index" class="btn btn-outline-secondary btn-sm ms-auto">
                            <i class="bi bi-arrow-left"></i> Back to Dashboard
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    <div class="alert alert-info">
                        <p>This page helps you verify and manage site locations on the interactive map. The table below shows all site database IDs matched with their locations on the interactive map. This information is useful when adding new sites or updating existing ones.</p>
                    </div>

                    <div class="row mb-4">
                        <div class="col-md-8">
                            <div id="mapSiteIdsMap" style="width:100%; height:400px; border-radius:8px; margin-bottom:10px;"></div>
                        </div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    <h6>Cities</h6>
                                </div>
                                <div class="card-body p-0">
                                    <div class="list-group list-group-flush" id="citySelector">
                                        <button class="list-group-item list-group-item-action active" data-city="all">All Cities</button>
                                        @foreach (var city in Model.Select(s => s.City).Distinct().OrderBy(c => c.Name))
                                        {
                                            <button class="list-group-item list-group-item-action" data-city="@city.Id">@city.Name</button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-striped" id="siteIdsTable">
                            <thead>
                                <tr>
                                    <th>Database ID</th>
                                    <th>Site Name</th>
                                    <th>City</th>
                                    <th>Location</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var site in Model.OrderBy(s => s.CityId).ThenBy(s => s.Id))
                                {
                                    <tr data-city-id="@site.CityId">
                                        <td>@site.Id</td>
                                        <td>@site.Name</td>
                                        <td>@site.City?.Name</td>
                                        <td>@site.Location</td>
                                        <td id="map-status-@site.Id">
                                            @{
                                                bool hasValidCoordinates = !string.IsNullOrEmpty(site.Location) && 
                                                    (site.Location.Contains("°") || site.Location.Contains(","));
                                            }
                                            
                                            @if (hasValidCoordinates)
                                            {
                                                <span class="badge bg-success">Valid Coordinates</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-warning">Missing Coordinates</span>
                                            }
                                        </td>
                                        <td>
                                            <a href="/City/Site/@site.Id" target="_blank" class="btn btn-sm btn-outline-primary">
                                                <i class="bi bi-eye"></i> View
                                            </a>
                                            <a href="/Admin/EditSite/@site.Id" class="btn btn-sm btn-outline-success">
                                                <i class="bi bi-pencil"></i> Edit
                                            </a>
                                            <button type="button" class="btn btn-sm btn-outline-info" onclick="centerMapOnSite(@site.Id)">
                                                <i class="bi bi-geo-alt"></i> Show on Map
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Site markers for the map
        let siteMarkers = [];
        let mapSiteIds;
        let activeInfoWindow = null;
        
        // Initialize map
        function initMapSiteIdsMap() {
            const mapElement = document.getElementById('mapSiteIdsMap');
            if (!mapElement) return;
            
            // Initialize the map centered on Saudi Arabia
            mapSiteIds = new google.maps.Map(mapElement, {
                center: { lat: 24.7136, lng: 42.3528 },
                zoom: 6,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: true,
                fullscreenControl: true,
                streetViewControl: false
            });
            
            // Add all sites to the map
            addSiteMarkers();
            
            // Add city filter functionality
            const cityButtons = document.querySelectorAll('#citySelector button');
            cityButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Update active button
                    cityButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Filter table and markers
                    const cityId = this.getAttribute('data-city');
                    filterSitesByCity(cityId);
                });
            });
        }
        
        // Add site markers to the map
        function addSiteMarkers() {
            @foreach (var site in Model)
            {
                <text>
                // Try to parse site location
                try {
                    const siteId = @site.Id;
                    const siteName = "@site.Name";
                    const cityName = "@site.City?.Name";
                    const locationText = "@site.Location";
                    
                    // Extract coordinates from location text
                    let lat = 0, lng = 0;
                    const latMatch = locationText.match(/([\d.]+)°\s*N/i);
                    const lngMatch = locationText.match(/([\d.]+)°\s*E/i);
                    
                    if (latMatch && lngMatch) {
                        lat = parseFloat(latMatch[1]);
                        lng = parseFloat(lngMatch[1]);
                        
                        // Create marker
                        const marker = new google.maps.Marker({
                            position: { lat, lng },
                            map: mapSiteIds,
                            title: siteName,
                            icon: {
                                path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
                                scale: 5,
                                fillColor: "#f8c15c",
                                fillOpacity: 1,
                                strokeWeight: 2,
                                strokeColor: "#1a3b29"
                            },
                            siteId: siteId,
                            cityId: @site.CityId
                        });
                        
                        // Add info window
                        const infoContent = `
                            <div class="map-info-window">
                                <h5>${siteName}</h5>
                                <p><strong>ID:</strong> ${siteId}</p>
                                <p><strong>City:</strong> ${cityName}</p>
                                <p><strong>Location:</strong> ${locationText}</p>
                                <div class="mt-2">
                                    <a href="/Admin/EditSite/${siteId}" class="btn btn-sm btn-primary">Edit Site</a>
                                    <a href="/City/Site/${siteId}" target="_blank" class="btn btn-sm btn-info">View Site</a>
                                </div>
                            </div>
                        `;
                        
                        const infoWindow = new google.maps.InfoWindow({
                            content: infoContent
                        });
                        
                        // Add click event
                        marker.addListener('click', () => {
                            // Close active info window
                            if (activeInfoWindow) {
                                activeInfoWindow.close();
                            }
                            
                            // Open this info window
                            infoWindow.open(mapSiteIds, marker);
                            activeInfoWindow = infoWindow;
                        });
                        
                        // Add to markers array
                        siteMarkers.push(marker);
                        
                        // Update status in the table
                        const statusCell = document.getElementById(`map-status-${siteId}`);
                        if (statusCell) {
                            statusCell.innerHTML = '<span class="badge bg-success">Valid Coordinates</span>';
                        }
                    } else {
                        // Invalid coordinates
                        const statusCell = document.getElementById(`map-status-${siteId}`);
                        if (statusCell) {
                            statusCell.innerHTML = '<span class="badge bg-warning">Invalid Coordinates</span>';
                        }
                    }
                } catch (error) {
                    console.error("Error adding marker for site @site.Id:", error);
                }
                </text>
            }
        }
        
        // Filter sites by city
        function filterSitesByCity(cityId) {
            const tableRows = document.querySelectorAll('#siteIdsTable tbody tr');
            
            // Filter table rows
            tableRows.forEach(row => {
                const rowCityId = row.getAttribute('data-city-id');
                if (cityId === 'all' || rowCityId === cityId) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
            
            // Filter map markers
            siteMarkers.forEach(marker => {
                if (cityId === 'all' || marker.cityId.toString() === cityId) {
                    marker.setMap(mapSiteIds);
                } else {
                    marker.setMap(null);
                }
            });
            
            // If a city is selected, zoom to it
            if (cityId !== 'all') {
                zoomToCity(cityId);
            } else {
                // Zoom out to show all of Saudi Arabia
                mapSiteIds.setCenter({ lat: 24.7136, lng: 42.3528 });
                mapSiteIds.setZoom(6);
            }
        }
        
        // Zoom to a specific city
        function zoomToCity(cityId) {
            // City coordinates mapping
            const cityCoordinates = {
                // Add your city coordinates here
                "1": { lat: 24.5246, lng: 39.5692 }, // Madinah
                "2": { lat: 24.7136, lng: 46.6753 }, // Riyadh
                "3": { lat: 26.6175, lng: 37.9158 }  // AlUla
                // Add more cities as needed
            };
            
            if (cityCoordinates[cityId]) {
                mapSiteIds.setCenter(cityCoordinates[cityId]);
                mapSiteIds.setZoom(11);
            }
        }
        // Center map on a specific site
          function centerMapOnSite(siteId) {
              // Find the marker for this site
              const marker = siteMarkers.find(m => m.siteId === siteId);
              if (marker) {
                  // Center map on the marker
                  mapSiteIds.setCenter(marker.getPosition());
                  mapSiteIds.setZoom(14);

                  // Trigger click event to show info window
                  google.maps.event.trigger(marker, 'click');
              }
          }

          // Load Google Maps API
          function loadGoogleMapsForAdmin() {
              if (typeof google !== 'undefined' && google.maps) {
                  // Google Maps already loaded
                  initMapSiteIdsMap();
                  return;
              }

              const apiKey = "AIzaSyCfmD2cv4d6ML3shp0YER9gpHT5VHdsvpQ"; // Using the same key as other maps
              const script = document.createElement('script');
              script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMapSiteIdsMap`;
              script.async = true;
              script.defer = true;
              document.body.appendChild(script);
          }

          // Load the map when the page is ready
          document.addEventListener('DOMContentLoaded', function() {
              loadGoogleMapsForAdmin();

              // Add search functionality
              const searchInput = document.createElement('input');
              searchInput.type = 'text';
              searchInput.className = 'form-control mb-3';
              searchInput.placeholder = 'Search sites...';

              const tableContainer = document.querySelector('.table-responsive');
              if (tableContainer) {
                  tableContainer.parentNode.insertBefore(searchInput, tableContainer);

                  // Add search functionality
                  searchInput.addEventListener('keyup', function() {
                      const searchTerm = this.value.toLowerCase();
                      const tableRows = document.querySelectorAll('#siteIdsTable tbody tr');

                      tableRows.forEach(row => {
                          const siteName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                          const cityName = row.querySelector('td:nth-child(3)').textContent.toLowerCase();

                          if (siteName.includes(searchTerm) || cityName.includes(searchTerm)) {
                              row.style.display = '';
                          } else {
                              row.style.display = 'none';
                          }
                      });
                  });
              }
          });
    </script>
}