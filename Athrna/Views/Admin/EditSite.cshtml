@model Athrna.Models.Site

@{
    ViewData["Title"] = "Edit Site";
    Layout = "_AdminLayout";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <div class="d-flex align-items-center">
                        <h6 class="mb-0">Edit Historical Site</h6>
                        <a asp-action="Sites" class="btn btn-outline-secondary btn-sm ms-auto">
                            <i class="bi bi-arrow-left"></i> Back to List
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger">
                            <ul>
                                @foreach (var modelState in ViewData.ModelState.Values)
                                {
                                    foreach (var error in modelState.Errors)
                                    {
                                        <li>@error.ErrorMessage</li>
                                    }
                                }
                            </ul>
                        </div>
                    }

                    <form asp-action="EditSite" method="post" enctype="multipart/form-data">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        
                        @* Important: Always include the Site.Id *@
                        <input type="hidden" asp-for="Id" />
                        
                        @* Include CulturalInfo.Id if it exists *@
                        @if (Model.CulturalInfo != null && Model.CulturalInfo.Id > 0)
                        {
                            <input type="hidden" name="CulturalInfo.Id" value="@Model.CulturalInfo.Id" />
                            <input type="hidden" name="CulturalInfo.SiteId" value="@Model.Id" />
                        }

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-section">
                                    <h5>Basic Information</h5>

                                    <div class="form-group mb-3">
                                        <label asp-for="Name" class="form-label">Site Name</label>
                                        <input asp-for="Name" class="form-control" required />
                                        <span asp-validation-for="Name" class="text-danger"></span>
                                    </div>

                                    <div class="form-group mb-3">
                                        <label for="CityId" class="form-label">City</label>
                                        <select asp-for="CityId" class="form-control" required>
                                            <option value="">-- Select City --</option>
                                            @foreach (var city in ViewBag.Cities)
                                            {
                                                <option value="@city.Id" selected="@(Model.CityId == city.Id)">@city.Name</option>
                                            }
                                        </select>
                                        <span asp-validation-for="CityId" class="text-danger"></span>
                                    </div>

                                    <div class="form-group mb-3">
                                        <label asp-for="SiteType" class="form-label">Site Type</label>
                                        <input asp-for="SiteType" class="form-control" required />
                                        <span asp-validation-for="SiteType" class="text-danger"></span>
                                        <small class="form-text text-muted">E.g., Mosque, Fortress, Museum, Archaeological Site, etc.</small>
                                    </div>

                                    <div class="form-group mb-3">
                                        <label asp-for="Location" class="form-label">Location</label>
                                        <input asp-for="Location" class="form-control" required />
                                        <span asp-validation-for="Location" class="text-danger"></span>
                                        <small class="form-text text-muted">Format: Latitude, Longitude (e.g., 24.4672° N, 39.6111° E)</small>
                                    </div>
                                    <!-- Location Map Picker -->
                                    <div class="form-section">
                                        <h5>Site Location</h5>
                                        <div class="location-map-container mb-3">
                                            <div id="locationMapPicker" style="width:100%; height:300px; border-radius:8px; margin-bottom:10px;"></div>
                                            <div class="map-instructions alert alert-info">
                                                <i class="bi bi-info-circle"></i> Click on the map to select a location. The coordinates will be automatically filled in the Location field.
                                            </div>
                                            <div class="map-coordinates-display d-flex gap-2 mb-2">
                                                <div class="input-group">
                                                    <span class="input-group-text">Latitude</span>
                                                    <input type="text" id="selectedLat" class="form-control" readonly>
                                                </div>
                                                <div class="input-group">
                                                    <span class="input-group-text">Longitude</span>
                                                    <input type="text" id="selectedLng" class="form-control" readonly>
                                                </div>
                                            </div>
                                            <button type="button" id="applyCoordinates" class="btn btn-outline-primary">
                                                <i class="bi bi-check-circle"></i> Apply Coordinates
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-section">
                                    <h5>Site Description</h5>

                                    <div class="form-group mb-3">
                                        <label asp-for="Description" class="form-label">Description</label>
                                        <textarea asp-for="Description" class="form-control" rows="6" required></textarea>
                                        <span asp-validation-for="Description" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-section">
                                    <h5>Cultural Information</h5>

                                    <div class="form-group mb-3">
                                        <label for="CulturalInfo_Summary" class="form-label">Cultural Summary</label>
                                        <textarea name="CulturalInfo.Summary" id="CulturalInfo_Summary" class="form-control" rows="4">@(Model.CulturalInfo?.Summary)</textarea>
                                    </div>

                                    <div class="form-group mb-3">
                                        <label for="CulturalInfo_EstablishedDate" class="form-label">Established Date</label>
                                        <div class="input-group">
                                            <input type="number" name="CulturalInfo.EstablishedDate" id="CulturalInfo_EstablishedDate" class="form-control" min="1" max="9999" 
                                                   value="@(Model.CulturalInfo != null ? (Model.CulturalInfo.EstablishedDate < 0 ? Math.Abs(Model.CulturalInfo.EstablishedDate) : Model.CulturalInfo.EstablishedDate) : 0)" />
                                            <select id="eraSelector" class="form-select" style="width: auto;">
                                                <option value="CE" selected="@(Model.CulturalInfo == null || Model.CulturalInfo.EstablishedDate >= 0)">CE</option>
                                                <option value="BCE" selected="@(Model.CulturalInfo != null && Model.CulturalInfo.EstablishedDate < 0)">BCE</option>
                                            </select>
                                        </div>
                                        <small class="form-text text-muted">Enter the year and select era (CE/BCE)</small>
                                    </div>
                                </div>

                                <div class="form-section">
                                    <h5>Site Image</h5>

                                    <div class="form-group mb-3">
                                        <label class="form-label">Upload Image</label>
                                        <input type="file" name="imageFile" class="form-control" accept="image/*">
                                        <small class="form-text text-muted">Upload a new image for this site (optional, max 5MB)</small>
                                    </div>

                                    @if (!string.IsNullOrEmpty(Model.ImagePath))
                                    {
                                        <div class="current-image mt-3">
                                            <p>Current image:</p>
                                            <img src="@Model.ImagePath" alt="@Model.Name" class="img-thumbnail" style="max-width: 300px; max-height: 200px;" />
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <a asp-action="SiteServices" asp-route-id="@Model.Id" class="btn btn-info me-2">
                            <i class="bi bi-list-check"></i> Manage Services
                        </a>
                        <div class="form-group mt-4 text-end">
                            <a asp-action="Sites" class="btn btn-outline-secondary me-2">Cancel</a>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@section Styles {
    <style>
        .map-notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 10px 20px;
            background-color: #333;
            color: white;
            border-radius: 4px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.3s ease;
            z-index: 1000;
        }

            .map-notification.show {
                opacity: 1;
                transform: translateY(0);
            }

            .map-notification.success {
                background-color: #28a745;
            }

            .map-notification.error {
                background-color: #dc3545;
            }
    </style>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="~/js/historical-date.js"></script>

    <!-- Map Picker Script -->
    <script>
        // Location Map Picker Implementation
        let locationMap;
        let locationMarker;
        let selectedLocation = { lat: 0, lng: 0 };

        // Initialize the map picker when Google Maps API is loaded
        function initLocationMapPicker() {
            // Get the map container
            const mapElement = document.getElementById('locationMapPicker');
            if (!mapElement) return;

            // Parse current location if available
            let initialLocation = { lat: 24.5246, lng: 39.5692 }; // Default to Madinah
            const locationField = document.getElementById('Location');

            if (locationField && locationField.value) {
                // Try to parse existing location in format "24.4672° N, 39.6111° E"
                try {
                    const locationText = locationField.value;
                    const latMatch = locationText.match(/([\d.]+)°\s*N/i);
                    const lngMatch = locationText.match(/([\d.]+)°\s*E/i);

                    if (latMatch && lngMatch) {
                        initialLocation.lat = parseFloat(latMatch[1]);
                        initialLocation.lng = parseFloat(lngMatch[1]);

                        // Update selected location
                        selectedLocation = { ...initialLocation };

                        // Update coordinate displays
                        document.getElementById('selectedLat').value = initialLocation.lat.toFixed(4);
                        document.getElementById('selectedLng').value = initialLocation.lng.toFixed(4);
                    }
                } catch (error) {
                    console.warn("Could not parse location:", error);
                }
            }

            // Initialize the map centered on the current location or default
            locationMap = new google.maps.Map(mapElement, {
                center: initialLocation,
                zoom: 12,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: true,
                fullscreenControl: true,
                streetViewControl: false
            });

            // Add a marker for the current location
            locationMarker = new google.maps.Marker({
                position: initialLocation,
                map: locationMap,
                draggable: true,
                title: "Site Location"
            });

            // Add click event to the map to update marker position
            locationMap.addListener("click", (event) => {
                updateMarkerPosition(event.latLng);
            });

            // Add drag event to the marker
            locationMarker.addListener("dragend", () => {
                updateMarkerPosition(locationMarker.getPosition());
            });

            // Apply coordinates button
            document.getElementById('applyCoordinates').addEventListener('click', applyCoordinatesToField);
        }

        // Update marker position and displayed coordinates
        function updateMarkerPosition(position) {
            // Update marker position
            locationMarker.setPosition(position);

            // Get latitude and longitude
            const lat = position.lat();
            const lng = position.lng();

            // Update selected location
            selectedLocation = { lat, lng };

            // Update coordinate displays
            document.getElementById('selectedLat').value = lat.toFixed(4);
            document.getElementById('selectedLng').value = lng.toFixed(4);
        }

        // Apply selected coordinates to the form field
        function applyCoordinatesToField() {
            const locationField = document.getElementById('Location');
            if (!locationField) return;

            // Format coordinates as "24.4672° N, 39.6111° E"
            const formattedLocation = `${Math.abs(selectedLocation.lat).toFixed(4)}° ${selectedLocation.lat >= 0 ? 'N' : 'S'}, ${Math.abs(selectedLocation.lng).toFixed(4)}° ${selectedLocation.lng >= 0 ? 'E' : 'W'}`;

            // Set the value in the location field
            locationField.value = formattedLocation;

            // Show confirmation message
            showMapNotification('Location updated successfully!', 'success');
        }

        // Show notification message
        function showMapNotification(message, type = 'info') {
            // Create notification element if it doesn't exist
            let notification = document.querySelector('.map-notification');
            if (!notification) {
                notification = document.createElement('div');
                notification.className = `map-notification ${type}`;
                document.body.appendChild(notification);
            } else {
                notification.className = `map-notification ${type}`;
            }

            // Set message and show
            notification.textContent = message;
            notification.classList.add('show');

            // Hide after 3 seconds
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        // Load Google Maps API
        function loadGoogleMapsForAdmin() {
            if (typeof google !== 'undefined' && google.maps) {
                // Google Maps already loaded
                initLocationMapPicker();
                return;
            }

            const apiKey = "AIzaSyCfmD2cv4d6ML3shp0YER9gpHT5VHdsvpQ"; // Using the same key as other maps
            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initLocationMapPicker`;
            script.async = true;
            script.defer = true;
            document.body.appendChild(script);
        }

        // Load the map when the page is ready
        document.addEventListener('DOMContentLoaded', function() {
            loadGoogleMapsForAdmin();
        });
    </script>
}