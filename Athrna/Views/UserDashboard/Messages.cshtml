@model IEnumerable<Athrna.Models.ConversationViewModel>

@{
    ViewData["Title"] = "My Messages";
}
<script>
    (function () {
        try {
            const theme = localStorage.getItem('theme');
            if (theme === 'dark') {
                document.documentElement.setAttribute('data-theme', 'dark');
            }
        } catch (e) {
            // Fallback: do nothing
        }
    })();
</script>
<link rel="stylesheet" href="~/css/dark-mode.css" />
<div class="dashboard-container">
    <div class="dashboard-header">
        <div class="container">
            <h1>My Messages</h1>
            <p>View and respond to messages from guides.</p>
        </div>
    </div>

    <div class="container mt-4">
        <!-- Dashboard Navigation -->
        <div class="dashboard-nav mb-4">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["Action"].ToString() == "Index" ? "active" : "")"
                       asp-action="Index">Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["Action"].ToString() == "Bookmarks" ? "active" : "")"
                       asp-action="Bookmarks">My Bookmarks</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["Action"].ToString() == "MyBookings" ? "active" : "")"
                       asp-controller="Booking" asp-action="MyBookings">My Bookings</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["Action"].ToString() == "Ratings" ? "active" : "")"
                       asp-action="Ratings">My Ratings</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["Action"].ToString() == "Messages" ? "active" : "")"
                       asp-action="Messages">
                        Messages
                        @if (Model is UserDashboardViewModel dashboard && dashboard.UnreadMessages > 0)
                        {
                            <span class="badge bg-danger">@dashboard.UnreadMessages</span>
                        }
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @(ViewContext.RouteData.Values["Action"].ToString() == "Profile" ? "active" : "")"
                       asp-action="Profile">My Profile</a>
                </li>
            </ul>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="dashboard-widget">
                    <div class="widget-header">
                        <h2>Conversations with Guides</h2>
                        <div class="search-filter">
                            <input type="text" id="conversationSearch" class="form-control form-control-sm" placeholder="Search conversations...">
                        </div>
                    </div>
                    <div class="widget-content">
                        @if (Model.Any())
                        {
                            <div class="conversation-list">
                                @foreach (var conversation in Model)
                                {
                                    <a href="@Url.Action("Conversation", "Message", new { guideId = conversation.GuideId })" class="conversation-item @(conversation.UnreadCount > 0 ? "unread" : "")">
                                        <div class="conversation-avatar">
                                            <div class="avatar-circle">
                                                @(conversation.GuideName.Substring(0, 1).ToUpper())
                                            </div>
                                        </div>
                                        <div class="conversation-content">
                                            <h4>@conversation.GuideName</h4>
                                            <p class="last-message">
                                                @(conversation.LastMessage.Content.Length > 50
                                                    ? conversation.LastMessage.Content.Substring(0, 50) + "..."
                                                    : conversation.LastMessage.Content)
                                            </p>
                                            <div class="conversation-meta">
                                                <span class="message-time">@conversation.LastMessage.SentAt.ToString("MMM dd, h:mm tt")</span>
                                                @if (conversation.UnreadCount > 0)
                                                {
                                                    <span class="unread-badge">@conversation.UnreadCount</span>
                                                }
                                            </div>
                                        </div>
                                    </a>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-content">
                                <p>You don't have any messages yet.</p>
                                <p>Start a conversation with a guide by visiting the city pages and clicking "Contact Guide" on any guide's profile.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .conversation-list {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .conversation-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            background-color: #f8f9fa;
            border-radius: 8px;
            text-decoration: none;
            color: inherit;
            transition: background-color 0.2s ease;
        }

        .conversation-item:hover {
            background-color: #e9ecef;
        }

        .conversation-item.unread {
            background-color: #e9f5ef;
            border-left: 3px solid #1a3b29;
        }

        .conversation-avatar {
            margin-right: 1rem;
        }

        .avatar-circle {
            width: 50px;
            height: 50px;
            background-color: #1a3b29;
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: bold;
        }

        .conversation-content {
            flex: 1;
        }

        .conversation-content h4 {
            margin: 0 0 0.25rem 0;
            font-size: 1.1rem;
        }

        .last-message {
            color: #6c757d;
            margin: 0 0 0.5rem 0;
        }

        .conversation-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .message-time {
            color: #6c757d;
            font-size: 0.8rem;
        }

        .unread-badge {
            background-color: #1a3b29;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
        }

        .empty-content {
            text-align: center;
            padding: 2rem 0;
            color: #6c757d;
        }
    </style>
}
@section Scripts {
    <link rel="stylesheet" href="~/css/styles.css" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('conversationSearch');
            const conversationItems = document.querySelectorAll('.conversation-item');

            if (searchInput) {
                searchInput.addEventListener('keyup', function() {
                    const searchTerm = this.value.toLowerCase();

                    conversationItems.forEach(item => {
                        const guideName = item.querySelector('h4').textContent.toLowerCase();
                        const messageText = item.querySelector('.last-message').textContent.toLowerCase();

                        if (guideName.includes(searchTerm) || messageText.includes(searchTerm)) {
                            item.style.display = '';
                        } else {
                            item.style.display = 'none';
                        }
                    });
                });
            }
        });
    </script>
}