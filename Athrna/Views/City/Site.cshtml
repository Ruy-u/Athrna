@model Athrna.Models.Site

@{
    ViewData["Title"] = Model.Name;
}
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCfmD2cv4d6ML3shp0YER9gpHT5VHdsvpQ&callback=initSiteLocationMap" async defer></script>

<!-- Add Toast Container for Notifications - Add this near the top -->
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1500">
    <div id="bookmarkToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="toastMessage">
                <!-- Message will be inserted here via JavaScript -->
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<div class="site-hero" data-site-id="@Model.Id">
    <div class="site-overlay"></div>
    @if (!string.IsNullOrEmpty(Model.ImagePath))
    {
        <img src="@Model.ImagePath" alt="@Model.Name" class="site-hero-img">
    }
    else
    {
        <img src="/api/placeholder/1200/400" alt="@Model.Name" class="site-hero-img">
    }
    <div class="container">
        <h1 class="site-title" data-translate="site-title">@Model.Name</h1>
        <div class="site-meta">
            <span class="site-type" data-translate="site-type">@Model.SiteType</span>
            <span class="site-location">
                <i class="bi bi-geo-alt"></i> @Model.Location
            </span>
            @if (Model.CulturalInfo != null)
            {
                <span class="site-year">
                    <i class="bi bi-calendar"></i> <span data-translate="Established">Established</span>: @Model.CulturalInfo.EstablishedDate
                </span>
            }
        </div>
    </div>
</div>

<div class="container mt-5">
    <div class="row">
        <div class="col-lg-8">
            <!-- Site Description -->
            <section class="site-description-section">
                <h2 data-translate="About">About @Model.Name</h2>
                <p class="site-description" data-translate="site-description">@Model.Description</p>

                @if (Model.CulturalInfo != null)
                {
                    <h3 class="mt-4" data-translate="Cultural Information">Cultural Information</h3>
                    <div class="cultural-info-section" data-cultural-info-id="@Model.Id" data-site-name="@Model.Name">
                        <p class="cultural-info" data-translate="cultural-info">@Model.CulturalInfo.Summary</p>
                    </div>
                }
            </section>

            <!-- Public Services Section -->
            <section class="site-description-section mt-5">
                <h2 data-translate="Available Services">Available Services</h2>
                <div class="row mt-4">
                    <div class="col-md-6 mb-3">
                        <div class="service-item">
                            <div class="service-icon">
                                <i class="bi bi-p-circle-fill"></i>
                            </div>
                            <div class="service-details">
                                <h4 data-translate="Parking">Parking</h4>
                                <p data-translate="Free parking available for visitors">Free parking available for visitors</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="service-item">
                            <div class="service-icon">
                                <i class="bi bi-info-circle-fill"></i>
                            </div>
                            <div class="service-details">
                                <h4 data-translate="Information Center">Information Center</h4>
                                <p data-translate="Tourist information and guides">Tourist information and guides</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="service-item">
                            <div class="service-icon">
                                <i class="bi bi-cup-hot-fill"></i>
                            </div>
                            <div class="service-details">
                                <h4 data-translate="Café">Café</h4>
                                <p data-translate="Traditional Saudi coffee and refreshments">Traditional Saudi coffee and refreshments</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="service-item">
                            <div class="service-icon">
                                <i class="bi bi-shop"></i>
                            </div>
                            <div class="service-details">
                                <h4 data-translate="Gift Shop">Gift Shop</h4>
                                <p data-translate="Local crafts and souvenirs">Local crafts and souvenirs</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="service-item">
                            <div class="service-icon">
                                <i class="bi bi-wifi"></i>
                            </div>
                            <div class="service-details">
                                <h4 data-translate="Free Wi-Fi">Free Wi-Fi</h4>
                                <p data-translate="Available throughout the site">Available throughout the site</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="service-item">
                            <div class="service-icon">
                                <i class="bi bi-universal-access"></i>
                            </div>
                            <div class="service-details">
                                <h4 data-translate="Accessibility">Accessibility</h4>
                                <p data-translate="Wheelchair ramps and accessible facilities">Wheelchair ramps and accessible facilities</p>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <section class="site-description-section mt-5">
                <h2 data-translate="Available Guides">Available Guides</h2>
                <div class="row mt-4">
                    @{
                        // Get guides for this city from ViewBag or create sample ones
                        var guides = ViewBag.Guides as List<Athrna.Models.Guide> ?? new List<Athrna.Models.Guide>();

                        // If guides is empty, get from the site's city
                        if (!guides.Any() && Model.City != null && Model.City.Guides != null)
                        {
                            guides = Model.City.Guides.ToList();
                        }
                    }

                    @{
                        // Check if the current user is a guide
                        bool isCurrentUserGuide = User.IsInRole("Guide");
                        string currentUserEmail = User.Identity.IsAuthenticated ? User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value : "";
                    }

                    @if (guides.Any())
                    {
                        foreach (var guide in guides.Take(3))
                        {
                            <div class="col-md-12 mb-4">
                                <div class="guide-profile">
                                    <div class="guide-avatar">
                                        <div class="avatar-circle">
                                            @(guide.FullName.Substring(0, 1).ToUpper())
                                        </div>
                                    </div>
                                    <div class="guide-info">
                                        <h4>@guide.FullName</h4>
                                        <p class="guide-details">
                                            <i class="bi bi-geo-alt"></i> @guide.City.Name
                                        </p>
                                        <p class="guide-details">
                                            <i class="bi bi-envelope"></i> @guide.Email
                                        </p>

                                        <!-- Guide Action Buttons -->
                                        <div class="guide-action mt-3">
                                            @if (!User.Identity.IsAuthenticated)
                                            {
                                                <!-- User is not logged in - Show login-required buttons -->
                                                <button class="btn btn-primary me-2 login-required-btn" data-action="book">
                                                    <i class="bi bi-calendar-plus"></i> Book a Tour
                                                </button>
                                                <button class="btn btn-outline-primary login-required-btn" data-action="contact">
                                                    <i class="bi bi-chat"></i> Contact Guide
                                                </button>
                                            }
                                            else if (User.IsInRole("Guide"))
                                            {
                                                string userEmail = User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;

                                                @if (guide.Email == userEmail)
                                                {
                                                    <!-- Current logged-in guide can't book themselves -->
                                                    <div class="alert alert-info mt-2 mb-0">
                                                        <small>This is your guide profile</small>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <!-- Guide contacting other guide - Only allow contact, not booking -->
                                                    <a asp-controller="Message" asp-action="Conversation" asp-route-guideId="@guide.Id" class="btn btn-outline-primary">
                                                        <i class="bi bi-chat"></i> Contact Guide
                                                    </a>
                                                }
                                            }
                                            else
                                            {
                                                <!-- Regular user can book and contact -->
                                                <a asp-controller="Booking" asp-action="Request" asp-route-id="@guide.Id" asp-route-siteId="@Model.Id" class="btn btn-primary me-2">
                                                    <i class="bi bi-calendar-plus"></i> Book a Tour
                                                </a>
                                                <a asp-controller="Message" asp-action="Conversation" asp-route-guideId="@guide.Id" class="btn btn-outline-primary">
                                                    <i class="bi bi-chat"></i> Contact Guide
                                                </a>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-12">
                            <div class="alert alert-info">
                                <p>No guides are currently registered for this location. For guided tours, please check at the information desk on-site.</p>
                            </div>
                        </div>
                    }

                    <!-- Add Login Required Modal -->
                    <div class="modal fade" id="loginRequiredModal" tabindex="-1" aria-labelledby="loginRequiredModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="loginRequiredModalLabel">Login Required</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <p>You need to be logged in to <span id="loginRequiredAction">perform this action</span>.</p>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <a href="#" class="btn btn-primary login-btn">Login Now</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Ratings and Reviews -->
            <section class="site-description-section mt-5">
                <h2 data-translate="Visitor Reviews">Visitor Reviews</h2>

                @if (Model.Ratings != null && Model.Ratings.Any())
                {
                    <div class="rating-summary mt-4">
                        <div class="average-rating">
                            <span class="rating-value">@Model.Ratings.Average(r => r.Value).ToString("0.0")</span>
                            <div class="stars">
                                @{
                                    var averageRating = Model.Ratings.Average(r => r.Value);
                                    for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= Math.Floor(averageRating))
                                        {
                                            <i class="bi bi-star-fill"></i>
                                        }
                                        else if (i <= Math.Ceiling(averageRating) && averageRating % 1 != 0)
                                        {
                                            <i class="bi bi-star-half"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-star"></i>
                                        }
                                    }
                                }
                            </div>
                            <span class="rating-count">@Model.Ratings.Count() reviews</span>
                        </div>

                        <div class="rating-distribution">
                            @for (int i = 5; i >= 1; i--)
                            {
                                var count = Model.Ratings.Count(r => r.Value == i);
                                var percent = Model.Ratings.Any() ? (count * 100 / Model.Ratings.Count()) : 0;

                                <div class="rating-bar">
                                    <div class="rating-label">@i <i class="bi bi-star-fill"></i></div>
                                    <div class="progress">
                                        <div class="progress-bar bg-success" role="progressbar" style="width: @percent%;"
                                             aria-valuenow="@percent" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                    <div class="rating-count">@count</div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="reviews-list mt-4">
                        @foreach (var rating in Model.Ratings.OrderByDescending(r => r.Id).Take(5))
                        {
                            <div class="review-item">
                                <div class="review-header">
                                    <div class="review-stars">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= rating.Value)
                                            {
                                                <i class="bi bi-star-fill"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-star"></i>
                                            }
                                        }
                                    </div>
                                    <div class="reviewer-name">
                                        @(rating.Client?.Username ?? "Anonymous")
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(rating.Review))
                                {
                                    <div class="review-text">
                                        @rating.Review
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="no-reviews">
                        <p>This site doesn't have any reviews yet. Be the first to leave a review!</p>
                    </div>
                }

                @if (User.Identity.IsAuthenticated)
                {
                    <div class="submit-review-section mt-4">
                        <h4 data-translate="Leave Your Review">Leave Your Review</h4>
                        <form asp-action="Rate" method="post">
                            <input type="hidden" name="siteId" value="@Model.Id" />

                            <div class="rating-input mb-3">
                                <div class="rating-stars">
                                    @for (int i = 5; i >= 1; i--)
                                    {
                                        <input type="radio" id="star@(i)" name="value" value="@i" />
                                        <label for="star@(i)" title="@i stars"></label>
                                    }
                                </div>
                                <div class="rating-label" data-translate="Select your rating">Select your rating</div>
                            </div>

                            <div class="form-group mb-3">
                                <label for="review" data-translate="Your Review (optional)">Your Review (optional)</label>
                                <textarea id="review" name="review" class="form-control" rows="4" placeholder="Share your experience..."></textarea>
                            </div>

                            <button type="submit" class="btn btn-primary" data-translate="Submit Review">Submit Review</button>
                        </form>
                    </div>
                }
                else
                {
                    <div class="login-prompt mt-4">
                        <p data-translate="Please login to leave a review">Please <a asp-controller="Account" asp-action="Login">login</a> to leave a review.</p>
                    </div>
                }
            </section>
        </div>

        <div class="col-lg-4">
            <div class="site-sidebar">
                <!-- Bookmark Button -->
                <div class="sidebar-widget">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <form asp-action="Bookmark" method="post" id="bookmarkForm">
                            <input type="hidden" name="id" value="@Model.Id" />
                            <button type="submit" class="btn @(ViewBag.IsBookmarked ? "btn-danger" : "btn-outline-primary") btn-block" id="bookmarkButton">
                                <i class="bi @(ViewBag.IsBookmarked ? "bi-bookmark-check-fill" : "bi-bookmark")"></i>
                                <span id="bookmarkButtonText">
                                    @(ViewBag.IsBookmarked ? "Remove Bookmark" : "Bookmark this Site")
                                </span>
                            </button>
                        </form>
                    }
                    else
                    {
                        <button class="btn btn-outline-primary btn-block login-required-btn" data-action="bookmark">
                            <i class="bi bi-bookmark"></i> <span data-translate="Bookmark this Site">Bookmark this Site</span>
                        </button>
                    }
                </div>

                <!-- Opening Hours -->
                <div class="sidebar-widget">
                    <h4 data-translate="Opening Hours">Opening Hours</h4>
                    <ul class="hours-list">
                        <li><span>Sunday - Thursday:</span> <span>9:00 AM - 5:00 PM</span></li>
                        <li><span>Friday:</span> <span>2:00 PM - 5:00 PM</span></li>
                        <li><span>Saturday:</span> <span>9:00 AM - 5:00 PM</span></li>
                    </ul>
                </div>

                <!-- Admission Fees -->
                <div class="sidebar-widget">
                    <h4 data-translate="Admission Fees">Admission Fees</h4>
                    <ul class="fees-list">
                        <li><span data-translate="Adults">Adults</span>: <span>50 SAR</span></li>
                        <li><span data-translate="Children (under 12)">Children (under 12)</span>: <span>25 SAR</span></li>
                        <li><span data-translate="Students">Students</span>: <span>35 SAR</span></li>
                        <li><span data-translate="Seniors (65+)">Seniors (65+)</span>: <span>35 SAR</span></li>
                        <li><span data-translate="Saudi Nationals">Saudi Nationals</span>: <span data-translate="Free">Free</span></li>
                    </ul>
                </div>

                <!-- City Information -->
                <div class="sidebar-widget">
                    <h4 data-translate="Located in">Located in</h4>
                    <div class="city-card">
                        <!-- Map container with location text above it -->
                        <div class="location-text mb-2">
                            <i class="bi bi-geo-alt-fill text-primary"></i> <strong>@Model.Name</strong> is located in <strong>@Model.City.Name</strong>
                            <div class="text-muted small">@Model.Location</div>
                        </div>

                        <!-- Map container -->
                        <div id="siteLocationMap" class="site-location-map"
                             data-site-lat="@Model.Location.Split(',')[0].Trim().Replace("°", "")"
                             data-site-lng="@Model.Location.Split(',')[1].Trim().Replace("°", "")"
                             data-site-name="@Model.Name"
                             data-city-name="@Model.City.Name"></div>

                        <div class="city-info mt-2">
                        <div class="city-info">
                            <h5>@Model.City.Name</h5>
                            <a asp-action="Explore" asp-route-id="@Model.City.Name.ToLower()" class="btn btn-sm btn-primary">
                                <span data-translate="Explore">Explore</span> @Model.City.Name
                            </a>
                        </div>
                    </div>
                </div>

                <!-- Nearby Sites -->
                <div class="sidebar-widget">
                    <h4 data-translate="Nearby Sites">Nearby Sites</h4>
                    <ul class="nearby-sites">
                        @if (ViewBag.NearbySites != null)
                        {
                            foreach (var site in ViewBag.NearbySites)
                            {
                                <li>
                                    <a asp-action="Site" asp-route-id="@site.Id">@site.Name</a>
                                    <span class="site-type-badge">@site.SiteType</span>
                                </li>
                            }
                        }
                        else
                        {
                            <li>No nearby sites found.</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Guide Contact Modal -->
<div class="modal fade" id="guideContactModal" tabindex="-1" aria-labelledby="guideContactModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="guideContactModalLabel" data-translate="Contact Guide">Contact Guide</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="guideContactForm">
                    <input type="hidden" id="guideId" name="guideId" value="">
                    <div class="mb-3">
                        <label for="groupSize" class="form-label" data-translate="Group Size">Group Size</label>
                        <select class="form-select" id="groupSize" name="groupSize" required>
                            <option value="">Select...</option>
                            <option value="1-2" data-translate="1-2 people">1-2 people</option>
                            <option value="3-5" data-translate="3-5 people">3-5 people</option>
                            <option value="6-10" data-translate="6-10 people">6-10 people</option>
                            <option value="10+" data-translate="More than 10 people">More than 10 people</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="message" class="form-label" data-translate="Message">Message</label>
                        <textarea class="form-control" id="message" name="message" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-translate="Close">Close</button>
                <button type="button" class="btn btn-primary" id="sendContactMessage" data-translate="Send Message">Send Message</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/SiteDetails.css" />
    <style>

        .site-location-map {
            width: 100%;
            height: 180px;
            border-radius: 8px;
            margin-bottom: 1rem;
            overflow: hidden;
        }
        .guide-action .btn-primary {
            background-color: #1a3b29;
            border-color: #1a3b29;
            font-weight: 500;
            padding: 0.5rem 1rem;
            transition: all 0.3s ease;
        }

            .guide-action .btn-primary:hover {
                background-color: #142e21;
                border-color: #142e21;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);


            }
    </style>
}

@section Scripts {
    <script src="~/js/SiteDetails.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Check for TempData message and show toast if it exists
        @if (TempData["Message"] != null)
        {
            <text>
                            // Get the message from TempData
                        const message = '@TempData["Message"]';

                        // Set message in toast
                        document.getElementById('toastMessage').innerText = message;

                        // Show toast notification
                        const bookmarkToast = new bootstrap.Toast(document.getElementById('bookmarkToast'));
                        bookmarkToast.show();

                        // Change toast background based on message
                        const toastElement = document.getElementById('bookmarkToast');
                        if (message.includes('removed')) {
                            toastElement.classList.remove('bg-success');
                        toastElement.classList.add('bg-danger');
                            } else {
                            toastElement.classList.remove('bg-danger');
                        toastElement.classList.add('bg-success');
                            }
            </text>
        }
        });

        // Add to SiteDetails.js or include in Site.cshtml's Scripts section
        document.addEventListener('DOMContentLoaded', function () {
            // Handle guide contact modal
            const guideContactModal = document.getElementById('guideContactModal');
            if (guideContactModal) {
                guideContactModal.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    const guideId = button.getAttribute('data-guide-id');
                    const guideName = button.getAttribute('data-guide-name');

                    document.getElementById('guideId').value = guideId;
                    document.getElementById('guideContactModalLabel').textContent = 'Contact ' + guideName;
                });

                // Handle send message button
                document.getElementById('sendContactMessage').addEventListener('click', function () {
                    const guideId = document.getElementById('guideId').value;
                    const groupSize = document.getElementById('groupSize').value;
                    const messageText = document.getElementById('message').value;

                    if (!groupSize || !messageText.trim()) {
                        alert('Please fill in all fields');
                        return;
                    }

                    const formattedMessage = `Group Size: ${groupSize}\n\n${messageText}`;

                    // Get the anti-forgery token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    // Send message via AJAX
                    fetch('/Message/SendToGuide', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': token
                        },
                        body: new URLSearchParams({
                            guideId: guideId,
                            content: formattedMessage
                        })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Hide modal
                                const modal = bootstrap.Modal.getInstance(guideContactModal);
                                modal.hide();

                                // Show success message
                                alert('Your message has been sent successfully. The guide will contact you soon.');

                                // Clear form
                                document.getElementById('guideContactForm').reset();
                            } else {
                                alert('Failed to send message: ' + (data.message || 'Unknown error'));
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while sending your message.');
                        });
                });
            }
        });
                // Initialize the site location map
        document.addEventListener('DOMContentLoaded', function() {
            const mapContainer = document.getElementById('siteLocationMap');
            if (!mapContainer) return;

            // Get coordinates from data attributes
            const siteLat = parseFloat(mapContainer.getAttribute('data-site-lat')) || 0;
            const siteLng = parseFloat(mapContainer.getAttribute('data-site-lng')) || 0;
            const siteName = mapContainer.getAttribute('data-site-name');
            const cityName = mapContainer.getAttribute('data-city-name');

            // Function to initialize the map
            function initSiteLocationMap() {
                // Create map centered on the site location
                const map = new google.maps.Map(mapContainer, {
                    center: { lat: siteLat, lng: siteLng },
                    zoom: 14,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    mapTypeControl: false,
                    streetViewControl: false,
                    fullscreenControl: false,
                    zoomControl: true,
                    scrollwheel: false,
                    styles: [
                        {
                            "featureType": "poi",
                            "stylers": [{ "visibility": "off" }]
                        },
                        {
                            "featureType": "transit",
                            "stylers": [{ "visibility": "off" }]
                        }
                    ]
                });

                // Add marker for the site
                const marker = new google.maps.Marker({
                    position: { lat: siteLat, lng: siteLng },
                    map: map,
                    title: siteName,
                    animation: google.maps.Animation.DROP,
                    icon: {
                        path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW,
                        scale: 5,
                        fillColor: "#f8c15c",
                        fillOpacity: 1,
                        strokeWeight: 2,
                        strokeColor: "#1a3b29"
                    }
                });

                // Add info window and open it immediately
                const infoWindow = new google.maps.InfoWindow({
                    content: `<div class="map-info-window"><h3>${siteName}</h3><p>${cityName}</p></div>`,
                    pixelOffset: new google.maps.Size(0, -30) // Offset to position above marker
                });

                // Open info window immediately
                infoWindow.open(map, marker);

                // Add click listener to reopen if closed
                marker.addListener('click', function() {
                    infoWindow.open(map, marker);
                });

                // Use a tighter zoom to show the location clearly
                map.setZoom(13);
                map.setCenter({ lat: siteLat, lng: siteLng });
            }

            // Check if Google Maps API is already loaded
            if (typeof google !== 'undefined' && google.maps) {
                initSiteLocationMap();
            } else {
                // If not loaded, create a callback to initialize when API loads
                window.initSiteLocationMap = initSiteLocationMap;

                // Add script to load Google Maps API if not already present
                if (!document.querySelector('script[src*="maps.googleapis.com/maps/api"]')) {
                    const script = document.createElement('script');
                    const apiKey = "AIzaSyCfmD2cv4d6ML3shp0YER9gpHT5VHdsvpQ"; // Using the key from your existing code
                    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initSiteLocationMap`;
                    script.async = true;
                    script.defer = true;
                    document.body.appendChild(script);
                } else {
                    // If script is already present but callback isn't set
                    const existingScript = document.querySelector('script[src*="maps.googleapis.com/maps/api"]');
                    const callbackMatch = existingScript.src.match(/callback=([^&]*)/);
                    if (callbackMatch && callbackMatch[1]) {
                        // Add our callback to the existing one
                        const existingCallback = callbackMatch[1];
                        const oldCallback = window[existingCallback];
                        window[existingCallback] = function() {
                            if (oldCallback) oldCallback();
                            initSiteLocationMap();
                        };
                    } else {
                        // Just wait for the map API to load
                        setTimeout(initSiteLocationMap, 1000);
                    }
                }
            }
        });
    </script>
}