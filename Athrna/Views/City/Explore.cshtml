@model Athrna.Models.CityDetailsViewModel

@{
    ViewData["Title"] = "Explore " + Model.City.Name;
}

<div class="city-header">
    <div class="city-overlay"></div>
    <h1>Explore @Model.City.Name</h1>
    <p>Discover the rich historical heritage of @Model.City.Name</p>
</div>

<div class="container mt-5">
    <!-- Historical Sites Section -->
    <section class="sites-section">
        <h2>Historical Sites in @Model.City.Name</h2>

        <div class="row">
            @foreach (var site in Model.Sites)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="site-card">
                        <div class="site-image">
                            @if (!string.IsNullOrEmpty(site.ImagePath))
                            {
                                <img src="@site.ImagePath" alt="@site.Name">
                            }
                            else
                            {
                                <img src="/api/placeholder/400/300" alt="@site.Name">
                            }
                        </div>
                        <div class="site-content">
                            <h3>@site.Name</h3>
                            <p class="site-type"><span>@site.SiteType</span></p>
                            <p class="site-description">@site.Description.Substring(0, Math.Min(150, site.Description.Length))...</p>
                            <div class="site-metadata">
                                @if (site.CulturalInfo != null)
                                {
                                    <p class="site-established">
                                        <i class="bi bi-calendar"></i> Established: @site.CulturalInfo.EstablishedDate
                                    </p>
                                }
                            </div>
                            <a asp-action="Site" asp-route-id="@site.Id" class="btn btn-primary mt-3">Explore Site</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>

    @{
        // Check if the current user is a guide
        bool isCurrentUserGuide = User.IsInRole("Guide");
        string currentUserEmail = User.Identity.IsAuthenticated ? User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value : "";
    }

    <!-- City Guides Section -->
    <section class="guides-section mt-5">
        <h2 data-translate="Available Guides in">Available Guides in @Model.City.Name</h2>

        <div class="row">
            @foreach (var guide in Model.Guides)
            {
                <div class="col-md-6 col-lg-3 mb-4">
                    <div class="guide-card">
                        <div class="guide-content">
                            <h4>@guide.FullName</h4>
                            <p class="guide-contact">
                                <i class="bi bi-envelope"></i> @guide.Email
                            </p>
                            <div class="guide-actions">
                                @if (!User.Identity.IsAuthenticated)
                                {
                                    <!-- User is not logged in -->
                                    <button class="btn btn-outline-primary btn-sm mt-2 login-required-btn" data-action="contact">
                                        Contact Guide
                                    </button>
                                }
                                else if (isCurrentUserGuide && guide.Email == currentUserEmail)
                                {
                                    <!-- Current logged-in guide can't contact themselves -->
                                    <div class="alert alert-info mt-2 p-1">
                                        <small>This is your profile</small>
                                    </div>
                                }
                                else
                                {
                                    <!-- Regular user or other guide -->
                                    <a asp-controller="Message" asp-action="Conversation" asp-route-guideId="@guide.Id"
                                       class="btn btn-outline-primary btn-sm mt-2"
                                       data-bs-toggle="tooltip" data-bs-placement="top"
                                       title="Start a conversation with @guide.FullName">Contact Guide</a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>

    <!-- Add Login Required Modal -->
    <div class="modal fade" id="loginRequiredModal" tabindex="-1" aria-labelledby="loginRequiredModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="loginRequiredModalLabel">Login Required</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>You need to be logged in to <span id="loginRequiredAction">perform this action</span>.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <a href="#" class="btn btn-primary login-btn">Login Now</a>
                </div>
            </div>
        </div>
    </div>

    
</div>

@section Styles {
    <style>
        .city-header {
            position: relative;
            background-image: url('/images/Maps/@(Model.City.Name.ToLower()).jpg');
            background-size: cover;
            background-position: center;
            height: 400px;
            color: white;
            text-align: center;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .city-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1;
        }

        .city-header h1, .city-header p {
            position: relative;
            z-index: 2;
        }

        .city-header h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .city-header p {
            font-size: 1.5rem;
        }

        .sites-section, .guides-section, .map-section {
            padding: 2rem 0;
        }

        .site-card {
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            height: 100%;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .site-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
        }

        .site-image {
            height: 200px;
            overflow: hidden;
        }

        .site-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.5s ease;
        }

        .site-card:hover .site-image img {
            transform: scale(1.1);
        }

        .site-content {
            padding: 1.5rem;
        }

        .site-type span {
            background-color: #1a3b29;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
        }

        .site-description {
            color: #666;
            margin: 1rem 0;
        }

        .site-metadata {
            color: #888;
            font-size: 0.9rem;
        }

        .guide-card {
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 1.5rem;
            text-align: center;
            transition: transform 0.3s ease;
        }

        .guide-card:hover {
            transform: translateY(-5px);
        }

        .guide-avatar {
            margin-bottom: 1rem;
        }

        .guide-avatar img {
            width: 100px;
            height: 100px;
            object-fit: cover;
        }

        .city-map {
            height: 500px;
            width: 100%;
            background-color: #f5f5f5;
            border-radius: 8px;
            position: relative;
        }

        .map-container {
            display: grid;
            grid-template-columns: 1fr 300px;
            gap: 20px;
        }

        .map-legend {
            background-color: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .map-legend ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .map-legend li {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .map-marker-icon {
            display: inline-block;
            width: 10px;
            height: 10px;
            background-color: #1a3b29;
            border-radius: 50%;
            margin-right: 10px;
        }

        @@media (max-width: 768px) {
            .map-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const cityMap = document.getElementById('cityMap');

            // Simulate map with site markers
            if (cityMap) {
                // Set map background
                cityMap.style.backgroundImage = "linear-gradient(rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.7)), url('/images/Maps/@(Model.City.Name.ToLower()).jpg')";
                cityMap.style.backgroundSize = 'cover';
                cityMap.style.backgroundPosition = 'center';

                // Add markers for each site
        @foreach (var site in Model.Sites)
        {
            <text>
                            createMarker('@site.Id', '@site.Name', '@site.Location', '@site.Description.Replace("'", "\\'").Replace("\n", " ")');
            </text>
        }
                    }

            function createMarker(id, name, location, description) {
                // Parse location string to get coordinates
                // This is a simple example - in a real app, you'd use actual coordinates
                const coords = location.split(',');
                let top, left;

                // For demo purposes, generate random positions if no coordinates
                if (coords.length < 2) {
                    top = Math.floor(Math.random() * 80) + 10 + '%';
                    left = Math.floor(Math.random() * 80) + 10 + '%';
                } else {
                    // Normalize coordinates to percentages for the demo
                    // In a real app, you'd use a proper mapping library like Leaflet or Google Maps
                    try {
                        const lat = parseFloat(coords[0].trim().replace('°', ''));
                        const lng = parseFloat(coords[1].trim().replace('°', ''));

                        // Simplified positioning for demo purposes
                        top = (Math.abs(lat) % 50 + 25) + '%';
                        left = (Math.abs(lng) % 50 + 25) + '%';
                    } catch (e) {
                        top = Math.floor(Math.random() * 80) + 10 + '%';
                        left = Math.floor(Math.random() * 80) + 10 + '%';
                    }
                }

                // Create marker element
                const marker = document.createElement('div');
                marker.className = 'map-marker';
                marker.style.position = 'absolute';
                marker.style.top = top;
                marker.style.left = left;
                marker.style.width = '20px';
                marker.style.height = '20px';
                marker.style.backgroundColor = '#1a3b29';
                marker.style.borderRadius = '50%';
                marker.style.cursor = 'pointer';
                marker.style.transform = 'translate(-50%, -50%)';
                marker.style.boxShadow = '0 0 0 4px rgba(255, 255, 255, 0.5)';

                // Add click event
                marker.addEventListener('click', function () {
                    window.location.href = '/City/Site/' + id;
                });

                // Add tooltip
                marker.title = name;

                cityMap.appendChild(marker);
            }

            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}
